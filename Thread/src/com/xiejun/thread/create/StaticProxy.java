package com.xiejun.thread.create;

/**
 * 静态代理 设计模式 1、真实角色 2、代理角色：真实角色的引用 3、二者 实现相同接口
 * 
 * @author Administrator
 * 
 */
public class StaticProxy {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// 创建真是角色
		Marry you = new You();
		// 创建代理角色+真实角色的引用
		WeddingCompany company = new WeddingCompany(you);
		//执行任务
		company.marry();
	}

}

// 接口
interface Marry {
	void marry();
}

// 真实角色
class You implements Marry {

	@Override
	public void marry() {
		System.out.println("you and 嫦娥结婚了。。。。");
	}

}

// 代理角色
class WeddingCompany implements Marry {
	private Marry you;

	public WeddingCompany(Marry you) {
		super();
		this.you = you;
	}

	private void before() {
		System.out.println("布置新房。。。。");
	}

	private void after() {
		System.out.println("闹洞房。。。。");
	}

	@Override
	public void marry() {
		before();
		you.marry();
		after();
	}

}
